// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String   @default("ADMIN") // "ADMIN" | "SUPERADMIN"
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id            Int      @id @default(autoincrement())
  email         String?  @unique
  twitterHandle String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Project {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  category      String?
  categories    String[] @default([])
  website       String?
  launchDate    DateTime?
  marketCap     String?
  avatarUrl     String?
  mindshare     String?
  kolAttention  String?
  engagement    String?
  trustScore    String?
  discord       String?
  twitter       String?
  telegram      String?
  rewardPoolUsd String?
  rewardRank    String?
  rawData       Json?     // <- Добавлено поле для хранения всего API-респонса twitterScout
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  mentions      Mention[]
}


model Influencer {
  id              String    @id @default(cuid())
  name            String
  username        String    @unique
  bio             String?
  avatarUrl       String?
  bannerUrl       String?
  profileUrl      String?
  platform        String?   
  verified        Boolean   @default(false)
  tweetsCount            String
  tweetsCountNumeric     Int?     @default(0)
  followersCount         String
  followersCountNumeric  Int?     @default(0)
  followings             String
  followingsNumeric      Int?     @default(0) 
  businessAccount Boolean   @default(false)
  twitterScoutJsonRaw Json? // <- Добавлено поле для хранения всего API-респонса twitterScout

  badges          String?
  expertise       String?
  mindshare       String?
  pow             String?
  poi             String?
  poe             String?
  moneyScore      String?

  kolScore         Int?
  smartFollowers   Int?
  engagementRate   Float?
  avgViews         Int?
  avgLikes         Int?
  totalPosts       Int?
  protokolsJsonRaw Json? // <- Добавлено поле для хранения всего API-респонса protokols api

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  mentions        Mention[]
}


model Mention {
  id             String      @id @default(cuid())
  project        Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  influencer     Influencer  @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  influencerId   String

  mindshare      String?
  pow            String?
  poi            String?
  poe            String?
  smartFollowers String?

  createdAt      DateTime @default(now())
}
